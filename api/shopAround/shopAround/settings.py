"""
Django settings for shopAround project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
import dj_database_url
from pathlib import Path
from dotenv import load_dotenv
import sys


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Determine the environment and load the appropriate .env file
DJANGO_ENV = os.getenv('DJANGO_ENV', 'production')

if DJANGO_ENV == 'test':
    dotenv_path = BASE_DIR / '.env.test'
else:
    dotenv_path = BASE_DIR / '.env.prod'

load_dotenv(dotenv_path)

# Get the environment variables
DATABASE_URL = os.getenv('DATABASE_URL')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',')



# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'api'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'shopAround.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'shopAround.wsgi.application'

PORT= os.getenv('PORT', 8000)

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {

    # 'default': {
    #     'ENGINE': 'django.db.backends.postgis',
    #     'NAME': 'postgres',        # Name of your existing PostgreSQL database
    #     'USER': '',        # Your PostgreSQL username
    #     'PASSWORD': '',# Your PostgreSQL password
    #     'HOST': '',                 # Set to 'localhost' for local databases
    #     'PORT': '6543',                      # Default PostgreSQL port
    # }

    #     'default': {
    #     'ENGINE': 'django.db.backends.postgresql.postgis',
    #     'NAME': DATABASE_NAME,        # Name of your existing PostgreSQL database
    #     'USER': DATABASE_USER,        # Your PostgreSQL username
    #     'PASSWORD': DATABASE_PASSWORD,# Your PostgreSQL password
    #     'HOST': DATABASE_HOST,                 # Set to 'localhost' for local databases
    #     'PORT': DATABASE_PORT,                      # Default PostgreSQL port
    # }

    'default': dj_database_url.parse(DATABASE_URL, engine='django.contrib.gis.db.backends.postgis')
}

if 'test' in sys.argv or 'pytest' in sys.argv:
    DATABASES['default']['NAME'] = 'test_' + DATABASES['default']['NAME']

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_PERMISION_CLASSES': [],
    'EXCEPTION_HANDLER': 'api.utils.exceptionHandler.customExceptionHandler'
}